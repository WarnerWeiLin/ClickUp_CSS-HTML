/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./client/src/dotButtons.js":
/*!**********************************!*\
  !*** ./client/src/dotButtons.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setupDotBtns\": () => (/* binding */ setupDotBtns),\n/* harmony export */   \"generateDotBtns\": () => (/* binding */ generateDotBtns),\n/* harmony export */   \"selectDotBtn\": () => (/* binding */ selectDotBtn)\n/* harmony export */ });\nconst setupDotBtns = (dotsArray, embla) => {\n    dotsArray.forEach((dotNode, i) => {\n        dotNode.addEventListener(\"click\", () => embla.scrollTo(i), false);\n    });\n};\n\nconst generateDotBtns = (dots, embla) => {\n    const template = document.getElementById(\"embla-dot-template\").innerHTML;\n    dots.innerHTML = embla.scrollSnapList().reduce(acc => acc + template, \"\");\n    return [].slice.call(dots.querySelectorAll(\".embla__dot\"));\n};\n\nconst selectDotBtn = (dotsArray, embla) => () => {\n    const previous = embla.previousScrollSnap();\n    const selected = embla.selectedScrollSnap();\n    dotsArray[previous].classList.remove(\"is-selected\");\n    dotsArray[selected].classList.add(\"is-selected\");\n};\n\n\n//# sourceURL=webpack://clickup_css_project/./client/src/dotButtons.js?");

/***/ }),

/***/ "./client/src/dummySlides.js":
/*!***********************************!*\
  !*** ./client/src/dummySlides.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"slidesArray\": () => (/* binding */ slidesArray)\n/* harmony export */ });\nconst slidesArray = [\n    {\n        name: 'John Fang',\n        credibility: 'wordfaang.com',\n        content: 'Suspendisse ultrices at diam lectus nullam. Nisl, sagittis viverra enim erat tortor ultricies massa turpis. Arcu pulvinar aenean nam laoreet nulla.',\n        source: './media/Ellipse-76.svg'\n    },\n    {\n        name: 'Jeny Doe',\n        credibility: 'UX Engineer',\n        content: 'Suspendisse ultrices at diam lectus nullam. Nisl, sagittis viverra enim erat tortor ultricies massa turpis. Arcu pulvinar aenean nam laoreet nulla.',\n        source: './media/Ellipse-76(1).svg'\n    },\n    {\n        name: 'John Fang',\n        credibility: 'wordfaang.com',\n        content: 'Suspendisse ultrices at diam lectus nullam. Nisl, sagittis viverra enim erat tortor ultricies massa turpis. Arcu pulvinar aenean nam laoreet nulla.',\n        source: './media/Ellipse-76.svg'\n    },\n    {\n        name: 'Jeny Doe',\n        credibility: 'UX Engineer',\n        content: 'Suspendisse ultrices at diam lectus nullam. Nisl, sagittis viverra enim erat tortor ultricies massa turpis. Arcu pulvinar aenean nam laoreet nulla.',\n        source: './media/Ellipse-76(1).svg'\n    }\n];\n\n\n//# sourceURL=webpack://clickup_css_project/./client/src/dummySlides.js?");

/***/ }),

/***/ "./client/src/index.js":
/*!*****************************!*\
  !*** ./client/src/index.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var embla_carousel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! embla-carousel */ \"./node_modules/embla-carousel/embla-carousel.esm.js\");\n/* harmony import */ var _prevAndNextButtons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./prevAndNextButtons */ \"./client/src/prevAndNextButtons.js\");\n/* harmony import */ var _dotButtons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dotButtons */ \"./client/src/dotButtons.js\");\n/* harmony import */ var _dummySlides__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dummySlides */ \"./client/src/dummySlides.js\");\n\n\n\n\n\nfunction createSlides(slideInfo) {\n    let emblaSlide = document.createElement('div');\n    emblaSlide.className = 'embla__slide';\n\n    let emblaSlideInner = document.createElement('div');\n    emblaSlideInner.className = 'embla__slide__inner';\n\n    let slideImg = document.createElement('img');\n    slideImg.className = 'embla__slide__img';\n    slideImg.src = slideInfo.source;\n\n    let slideName = document.createElement('div');\n    slideName.className = 'embla__slide__name';\n    slideName.innerHTML = `${slideInfo.name}`;\n\n    let slideCred = document.createElement('div');\n    slideCred.className = 'embla__slide__credibility';\n    slideCred.innerHTML = `${slideInfo.credibility}`;\n\n    let slideContent = document.createElement('div');\n    slideContent.className = 'embla__slide__content';\n    slideContent.innerHTML = `${slideInfo.content}`;\n\n    emblaSlide.appendChild(emblaSlideInner);\n    emblaSlideInner.appendChild(slideImg);\n    emblaSlideInner.appendChild(slideName);\n    emblaSlideInner.appendChild(slideCred);\n    emblaSlideInner.appendChild(slideContent);\n\n    const wrap = document.querySelector(\".embla\");\n    let slideContainer = wrap.querySelector(\".embla__container\");\n\n    slideContainer.appendChild(emblaSlide);\n\n    const viewPort = wrap.querySelector(\".embla__viewport\");\n    const embla = (0,embla_carousel__WEBPACK_IMPORTED_MODULE_3__.default)(viewPort, {\n        loop: false,\n        align: 'start'\n    });\n    const prevBtn = wrap.querySelector(\".embla__button--prev\");\n    const nextBtn = wrap.querySelector(\".embla__button--next\");\n\n    const dots = document.querySelector(\".embla__dots\");\n\n    const dotsArray = (0,_dotButtons__WEBPACK_IMPORTED_MODULE_1__.generateDotBtns)(dots, embla);\n    const setSelectedDotBtn = (0,_dotButtons__WEBPACK_IMPORTED_MODULE_1__.selectDotBtn)(dotsArray, embla);\n    const disablePrevAndNextBtns = (0,_prevAndNextButtons__WEBPACK_IMPORTED_MODULE_0__.disablePrevNextBtns)(prevBtn, nextBtn, embla);\n\n    (0,_prevAndNextButtons__WEBPACK_IMPORTED_MODULE_0__.setupPrevNextBtns)(prevBtn, nextBtn, embla);\n    (0,_dotButtons__WEBPACK_IMPORTED_MODULE_1__.setupDotBtns)(dotsArray, embla);\n\n    embla.on(\"select\", setSelectedDotBtn);\n    embla.on(\"select\", disablePrevAndNextBtns);\n    embla.on(\"init\", setSelectedDotBtn);\n    embla.on(\"init\", disablePrevAndNextBtns);\n}\n\n_dummySlides__WEBPACK_IMPORTED_MODULE_2__.slidesArray.forEach((slideInfo) => createSlides(slideInfo));\n\n\n//# sourceURL=webpack://clickup_css_project/./client/src/index.js?");

/***/ }),

/***/ "./client/src/prevAndNextButtons.js":
/*!******************************************!*\
  !*** ./client/src/prevAndNextButtons.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setupPrevNextBtns\": () => (/* binding */ setupPrevNextBtns),\n/* harmony export */   \"disablePrevNextBtns\": () => (/* binding */ disablePrevNextBtns)\n/* harmony export */ });\nconst setupPrevNextBtns = (prevBtn, nextBtn, embla) => {\n    prevBtn.addEventListener('click', embla.scrollPrev, false);\n    nextBtn.addEventListener('click', embla.scrollNext, false);\n};\n\nconst disablePrevNextBtns = (prevBtn, nextBtn, embla) => {\n    return () => {\n        if (embla.canScrollPrev()) prevBtn.removeAttribute('disabled');\n        else prevBtn.setAttribute('disabled', 'disabled');\n\n        if (embla.canScrollNext()) nextBtn.removeAttribute('disabled');\n        else nextBtn.setAttribute('disabled', 'disabled');\n    };\n};\n\n\n//# sourceURL=webpack://clickup_css_project/./client/src/prevAndNextButtons.js?");

/***/ }),

/***/ "./node_modules/embla-carousel/embla-carousel.esm.js":
/*!***********************************************************!*\
  !*** ./node_modules/embla-carousel/embla-carousel.esm.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction Alignment(params) {\n  var viewSize = params.viewSize,\n      align = params.align;\n  var predefined = {\n    start: start,\n    center: center,\n    end: end\n  };\n\n  function start() {\n    return 0;\n  }\n\n  function center(n) {\n    return end(n) / 2;\n  }\n\n  function end(n) {\n    return viewSize - n;\n  }\n\n  function percent() {\n    return viewSize * Number(align);\n  }\n\n  function measure(n) {\n    if (typeof align === 'number') return percent();\n    return predefined[align](n);\n  }\n\n  var self = {\n    measure: measure\n  };\n  return self;\n}\n\nfunction Animation(callback) {\n  var animationFrame = 0;\n\n  function ifAnimating(active, cb) {\n    return function () {\n      if (active === !!animationFrame) cb();\n    };\n  }\n\n  function start() {\n    animationFrame = window.requestAnimationFrame(callback);\n  }\n\n  function stop() {\n    window.cancelAnimationFrame(animationFrame);\n    animationFrame = 0;\n  }\n\n  var self = {\n    proceed: ifAnimating(true, start),\n    start: ifAnimating(false, start),\n    stop: ifAnimating(true, stop)\n  };\n  return self;\n}\n\nfunction Axis(axis) {\n  var scroll = axis === 'y' ? 'y' : 'x';\n  var cross = axis === 'y' ? 'x' : 'y';\n\n  function measure(node) {\n    var _a = node.getBoundingClientRect(),\n        width = _a.width,\n        height = _a.height;\n\n    return scroll === 'x' ? width : height;\n  }\n\n  var self = {\n    cross: cross,\n    measure: measure,\n    scroll: scroll\n  };\n  return self;\n}\n\nfunction map(value, iStart, iStop, oStart, oStop) {\n  return oStart + (oStop - oStart) * ((value - iStart) / (iStop - iStart));\n}\nfunction mathSign(n) {\n  return !n ? 0 : n / Math.abs(n);\n}\nfunction deltaAbs(valueB, valueA) {\n  return Math.abs(valueB - valueA);\n}\nfunction factorAbs(valueB, valueA) {\n  if (valueB === 0 || valueA === 0) return 0;\n  if (Math.abs(valueB) <= Math.abs(valueA)) return 0;\n  var diff = deltaAbs(Math.abs(valueB), Math.abs(valueA));\n  return Math.abs(diff / valueB);\n}\nfunction roundToDecimals(decimalPoints) {\n  var pow = Math.pow(10, decimalPoints);\n  return function (n) {\n    return Math.round(n * pow) / pow;\n  };\n}\nfunction debounce(callback, time) {\n  var timeout = 0;\n  return function () {\n    window.clearTimeout(timeout);\n    timeout = window.setTimeout(callback, time) || 0;\n  };\n}\nfunction groupArray(array, size) {\n  var groups = [];\n\n  for (var i = 0; i < array.length; i += size) {\n    groups.push(array.slice(i, i + size));\n  }\n\n  return groups;\n}\nfunction arrayKeys(array) {\n  return Object.keys(array).map(Number);\n}\nfunction removeClass(node, className) {\n  var cl = node.classList;\n  if (className && cl.contains(className)) cl.remove(className);\n}\nfunction addClass(node, className) {\n  var cl = node.classList;\n  if (className && !cl.contains(className)) cl.add(className);\n}\n\nfunction Counter(params) {\n  var start = params.start,\n      limit = params.limit,\n      loop = params.loop;\n  var min = limit.min,\n      max = limit.max;\n  var type = loop ? 'loop' : 'constrain';\n  var withinLimit = limit[type];\n  var counter = withinLimit(start);\n\n  function get() {\n    return counter;\n  }\n\n  function set(n) {\n    counter = withinLimit(n);\n    return self;\n  }\n\n  function add(n) {\n    if (n !== 0) {\n      var sign = mathSign(n);\n      set(get() + sign);\n      return add(n + sign * -1);\n    }\n\n    return self;\n  }\n\n  function clone() {\n    return Counter({\n      start: get(),\n      limit: limit,\n      loop: loop\n    });\n  }\n\n  var self = {\n    add: add,\n    clone: clone,\n    get: get,\n    max: max,\n    min: min,\n    set: set\n  };\n  return self;\n}\n\nfunction Direction(direction) {\n  var sign = direction === 'rtl' ? -1 : 1;\n\n  function applyTo(n) {\n    return n * sign;\n  }\n\n  var self = {\n    applyTo: applyTo\n  };\n  return self;\n}\n\nfunction EventStore() {\n  var listeners = [];\n\n  function add(node, type, handler, options) {\n    if (options === void 0) {\n      options = false;\n    }\n\n    node.addEventListener(type, handler, options);\n    listeners.push(function () {\n      return node.removeEventListener(type, handler, options);\n    });\n    return self;\n  }\n\n  function removeAll() {\n    listeners = listeners.filter(function (remove) {\n      return remove();\n    });\n    return self;\n  }\n\n  var self = {\n    add: add,\n    removeAll: removeAll\n  };\n  return self;\n}\n\nfunction Vector1D(value) {\n  var vector = value;\n\n  function get() {\n    return vector;\n  }\n\n  function set(n) {\n    vector = readNumber(n);\n    return self;\n  }\n\n  function add(n) {\n    vector += readNumber(n);\n    return self;\n  }\n\n  function subtract(n) {\n    vector -= readNumber(n);\n    return self;\n  }\n\n  function multiply(n) {\n    vector *= n;\n    return self;\n  }\n\n  function divide(n) {\n    vector /= n;\n    return self;\n  }\n\n  function normalize() {\n    if (vector !== 0) divide(vector);\n    return self;\n  }\n\n  function readNumber(n) {\n    return typeof n === 'number' ? n : n.get();\n  }\n\n  var self = {\n    add: add,\n    divide: divide,\n    get: get,\n    multiply: multiply,\n    normalize: normalize,\n    set: set,\n    subtract: subtract\n  };\n  return self;\n}\n\nfunction DragHandler(params) {\n  var target = params.target,\n      scrollBody = params.scrollBody,\n      dragFree = params.dragFree,\n      animation = params.animation,\n      axis = params.axis,\n      scrollTo = params.scrollTo;\n  var root = params.root,\n      dragTracker = params.dragTracker,\n      location = params.location,\n      events = params.events,\n      limit = params.limit,\n      direction = params.direction;\n  var scrollAxis = axis.scroll,\n      crossAxis = axis.cross;\n  var focusNodes = ['INPUT', 'SELECT', 'TEXTAREA'];\n  var startScroll = Vector1D(0);\n  var startCross = Vector1D(0);\n  var dragStartPoint = Vector1D(0);\n  var activationEvents = EventStore();\n  var interactionEvents = EventStore();\n  var snapForceBoost = {\n    mouse: 2.5,\n    touch: 3.5\n  };\n  var freeForceBoost = {\n    mouse: 5,\n    touch: 7\n  };\n  var baseSpeed = dragFree ? 5 : 12;\n  var dragThreshold = 4;\n  var pointerIsDown = false;\n  var preventScroll = false;\n  var preventClick = false;\n  var isMouse = false;\n\n  function addActivationEvents() {\n    var node = root;\n    activationEvents.add(node, 'touchmove', function () {\n      return undefined;\n    }).add(node, 'touchend', function () {\n      return undefined;\n    }).add(node, 'touchstart', down).add(node, 'mousedown', down).add(node, 'touchcancel', up).add(node, 'contextmenu', up).add(node, 'click', click);\n  }\n\n  function addInteractionEvents() {\n    var node = !isMouse ? root : document;\n    interactionEvents.add(node, 'touchmove', move).add(node, 'touchend', up).add(node, 'mousemove', move).add(node, 'mouseup', up);\n  }\n\n  function removeAllEvents() {\n    activationEvents.removeAll();\n    interactionEvents.removeAll();\n  }\n\n  function isFocusNode(node) {\n    var name = node.nodeName || '';\n    return focusNodes.indexOf(name) > -1;\n  }\n\n  function forceBoost() {\n    var boost = dragFree ? freeForceBoost : snapForceBoost;\n    var type = isMouse ? 'mouse' : 'touch';\n    return boost[type];\n  }\n\n  function allowedForce(force) {\n    var scrollTarget = params.scrollTarget,\n        index = params.index;\n    var currentLocation = scrollTarget.byDistance(0, false);\n    var targetChanged = currentLocation.index !== index.get();\n    var seekNext = !targetChanged && Math.abs(force) > dragThreshold;\n    var destination = force + location.get();\n\n    if (seekNext && !dragFree && !limit.reachedAny(destination)) {\n      var next = index.clone().add(mathSign(force) * -1);\n      return scrollTarget.byIndex(next.get(), 0).distance;\n    }\n\n    return scrollTarget.byDistance(force, !dragFree).distance;\n  }\n\n  function down(evt) {\n    isMouse = evt.type === 'mousedown';\n    if (isMouse && evt.button !== 0) return;\n    var isMoving = deltaAbs(target.get(), location.get()) >= 2;\n    var clearPreventClick = isMouse || !isMoving;\n    var isNotFocusNode = !isFocusNode(evt.target);\n    var preventDefault = isMoving || isMouse && isNotFocusNode;\n    pointerIsDown = true;\n    dragTracker.pointerDown(evt);\n    dragStartPoint.set(target);\n    target.set(location);\n    scrollBody.useBaseMass().useSpeed(80);\n    addInteractionEvents();\n    startScroll.set(dragTracker.readPoint(evt, scrollAxis));\n    startCross.set(dragTracker.readPoint(evt, crossAxis));\n    events.emit('pointerDown');\n    if (clearPreventClick) preventClick = false;\n    if (preventDefault) evt.preventDefault();\n  }\n\n  function move(evt) {\n    if (!preventScroll && !isMouse) {\n      if (!evt.cancelable) return up();\n      var moveScroll = dragTracker.readPoint(evt, scrollAxis).get();\n      var moveCross = dragTracker.readPoint(evt, crossAxis).get();\n      var diffScroll = deltaAbs(moveScroll, startScroll.get());\n      var diffCross = deltaAbs(moveCross, startCross.get());\n      preventScroll = diffScroll > diffCross;\n      if (!preventScroll && !preventClick) return up();\n    }\n\n    var diff = dragTracker.pointerMove(evt);\n    if (!preventClick && diff) preventClick = true;\n    animation.start();\n    target.add(direction.applyTo(diff));\n    evt.preventDefault();\n  }\n\n  function up() {\n    var rawForce = dragTracker.pointerUp() * forceBoost();\n    var force = allowedForce(direction.applyTo(rawForce));\n    var speedFactor = factorAbs(rawForce, force);\n    var isMoving = deltaAbs(target.get(), dragStartPoint.get()) >= 0.5;\n    if (isMoving && !isMouse) preventClick = true;\n    preventScroll = false;\n    pointerIsDown = false;\n    interactionEvents.removeAll();\n    scrollBody.useSpeed(baseSpeed + baseSpeed * speedFactor);\n    scrollTo.distance(force, !dragFree);\n    isMouse = false;\n    events.emit('pointerUp');\n  }\n\n  function click(evt) {\n    if (preventClick) evt.preventDefault();\n  }\n\n  function clickAllowed() {\n    return !preventClick;\n  }\n\n  function pointerDown() {\n    return pointerIsDown;\n  }\n\n  var self = {\n    addActivationEvents: addActivationEvents,\n    clickAllowed: clickAllowed,\n    pointerDown: pointerDown,\n    removeAllEvents: removeAllEvents\n  };\n  return self;\n}\n\nfunction DragTracker(params) {\n  var axis = params.axis,\n      pxToPercent = params.pxToPercent;\n  var scrollAxis = axis.scroll;\n  var coords = {\n    x: 'clientX',\n    y: 'clientY'\n  };\n  var startDrag = Vector1D(0);\n  var diffDrag = Vector1D(0);\n  var lastDrag = Vector1D(0);\n  var pointValue = Vector1D(0);\n  var trackInterval = 10;\n  var trackLength = 5;\n  var trackTime = 100;\n  var trackPoints = [];\n  var lastMoveTime = new Date().getTime();\n  var isMouse = false;\n\n  function readPoint(evt, type) {\n    isMouse = !evt.touches;\n    var c = coords[type];\n    var value = isMouse ? evt[c] : evt.touches[0][c];\n    return pointValue.set(value);\n  }\n\n  function pointerDown(evt) {\n    var point = readPoint(evt, scrollAxis);\n    startDrag.set(point);\n    lastDrag.set(point);\n    return pxToPercent.measure(startDrag.get());\n  }\n\n  function pointerMove(evt) {\n    var point = readPoint(evt, scrollAxis);\n    var nowTime = new Date().getTime();\n    var diffTime = nowTime - lastMoveTime;\n\n    if (diffTime >= trackInterval) {\n      if (diffTime >= trackTime) trackPoints = [];\n      trackPoints.push(point.get());\n      lastMoveTime = nowTime;\n    }\n\n    diffDrag.set(point).subtract(lastDrag);\n    lastDrag.set(point);\n    return pxToPercent.measure(diffDrag.get());\n  }\n\n  function pointerUp() {\n    var nowTime = new Date().getTime();\n    var diffTime = nowTime - lastMoveTime;\n    var currentPoint = lastDrag.get();\n    var force = trackPoints.slice(-trackLength).map(function (trackPoint) {\n      return currentPoint - trackPoint;\n    }).sort(function (p1, p2) {\n      return Math.abs(p1) < Math.abs(p2) ? 1 : -1;\n    })[0];\n    lastDrag.set(diffTime > trackTime || !force ? 0 : force);\n    trackPoints = [];\n    return pxToPercent.measure(lastDrag.get());\n  }\n\n  var self = {\n    pointerDown: pointerDown,\n    pointerMove: pointerMove,\n    pointerUp: pointerUp,\n    readPoint: readPoint\n  };\n  return self;\n}\n\nfunction Limit(params) {\n  var min = params.min,\n      max = params.max;\n  var length = Math.abs(min - max);\n\n  function reachedMin(n) {\n    return n < min;\n  }\n\n  function reachedMax(n) {\n    return n > max;\n  }\n\n  function reachedAny(n) {\n    return reachedMin(n) || reachedMax(n);\n  }\n\n  function removeOffset(n) {\n    if (min === max) return n;\n\n    while (reachedMin(n)) {\n      n += length;\n    }\n\n    while (reachedMax(n)) {\n      n -= length;\n    }\n\n    return n;\n  }\n\n  function loop(n) {\n    if (!reachedAny(n)) return n;\n    return reachedMin(n) ? max : min;\n  }\n\n  function constrain(n) {\n    if (!reachedAny(n)) return n;\n    return reachedMin(n) ? min : max;\n  }\n\n  var self = {\n    constrain: constrain,\n    length: length,\n    loop: loop,\n    max: max,\n    min: min,\n    reachedAny: reachedAny,\n    reachedMax: reachedMax,\n    reachedMin: reachedMin,\n    removeOffset: removeOffset\n  };\n  return self;\n}\n\nfunction PxToPercent(viewInPx) {\n  var totalPercent = 100;\n\n  function measure(n) {\n    return n / viewInPx * totalPercent;\n  }\n\n  var self = {\n    measure: measure,\n    totalPercent: totalPercent\n  };\n  return self;\n}\n\nfunction ScrollBody(params) {\n  var location = params.location,\n      baseSpeed = params.speed,\n      baseMass = params.mass;\n  var roundToTwoDecimals = roundToDecimals(2);\n  var velocity = Vector1D(0);\n  var acceleration = Vector1D(0);\n  var attraction = Vector1D(0);\n  var attractionDirection = 0;\n  var speed = baseSpeed;\n  var mass = baseMass;\n\n  function update() {\n    velocity.add(acceleration);\n    location.add(velocity);\n    acceleration.multiply(0);\n  }\n\n  function applyForce(v) {\n    v.divide(mass);\n    acceleration.add(v);\n  }\n\n  function seek(v) {\n    attraction.set(v).subtract(location);\n    var magnitude = attraction.get();\n    var m = map(magnitude, 0, 100, 0, speed);\n    attractionDirection = mathSign(attraction.get());\n    attraction.normalize().multiply(m).subtract(velocity);\n    applyForce(attraction);\n    return self;\n  }\n\n  function settle(v) {\n    var diff = v.get() - location.get();\n    var diffRounded = roundToTwoDecimals(diff);\n    var hasSettled = !diffRounded;\n    if (hasSettled) location.set(v);\n    return hasSettled;\n  }\n\n  function direction() {\n    return attractionDirection;\n  }\n\n  function useSpeed(n) {\n    speed = n;\n    return self;\n  }\n\n  function useMass(n) {\n    mass = n;\n    return self;\n  }\n\n  function useBaseSpeed() {\n    return useSpeed(baseSpeed);\n  }\n\n  function useBaseMass() {\n    return useMass(baseMass);\n  }\n\n  var self = {\n    direction: direction,\n    seek: seek,\n    settle: settle,\n    update: update,\n    useBaseMass: useBaseMass,\n    useBaseSpeed: useBaseSpeed,\n    useMass: useMass,\n    useSpeed: useSpeed\n  };\n  return self;\n}\n\nfunction ScrollBounds(params) {\n  var limit = params.limit,\n      location = params.location,\n      scrollBody = params.scrollBody;\n  var pullBackThreshold = 10;\n  var disabled = false;\n\n  function shouldConstrain(target) {\n    if (disabled) return false;\n    if (!limit.reachedAny(target.get())) return false;\n    if (!limit.reachedAny(location.get())) return false;\n    return true;\n  }\n\n  function constrain(target, pointerDown) {\n    if (!shouldConstrain(target)) return;\n    var friction = pointerDown ? 0.7 : 0.4;\n    var diffToTarget = target.get() - location.get();\n    target.subtract(diffToTarget * friction);\n\n    if (!pointerDown && Math.abs(diffToTarget) < pullBackThreshold) {\n      target.set(limit.constrain(target.get()));\n      scrollBody.useSpeed(10).useMass(3);\n    }\n  }\n\n  function toggleActive(active) {\n    disabled = !active;\n  }\n\n  var self = {\n    constrain: constrain,\n    toggleActive: toggleActive\n  };\n  return self;\n}\n\nfunction ScrollContain(params) {\n  var alignment = params.alignment,\n      contentSize = params.contentSize,\n      viewSize = params.viewSize;\n  var scrollBounds = Limit({\n    min: -contentSize + viewSize,\n    max: 0\n  });\n  var alignedWithinView = [alignment.measure(contentSize)];\n  var contentExceedsView = contentSize > viewSize;\n\n  function findDuplicates(scrollSnaps) {\n    var startSnap = scrollSnaps[0];\n    var endSnap = scrollSnaps[scrollSnaps.length - 1];\n    var min = scrollSnaps.lastIndexOf(startSnap) + 1;\n    var max = scrollSnaps.indexOf(endSnap);\n    return Limit({\n      min: min,\n      max: max\n    });\n  }\n\n  function measure(scrollSnaps, trim) {\n    var containedSnaps = scrollSnaps.map(scrollBounds.constrain);\n\n    var _a = findDuplicates(containedSnaps),\n        min = _a.min,\n        max = _a.max;\n\n    if (!contentExceedsView) return alignedWithinView;\n    if (!trim) return containedSnaps;\n    return containedSnaps.slice(min - 1, max + 1);\n  }\n\n  var self = {\n    measure: measure\n  };\n  return self;\n}\n\nfunction ScrollLimit(params) {\n  var contentSize = params.contentSize,\n      loop = params.loop;\n\n  function measure(scrollSnaps) {\n    var startSnap = scrollSnaps[0];\n    var endSnap = scrollSnaps[scrollSnaps.length - 1];\n    var min = loop ? startSnap - contentSize : endSnap;\n    var max = startSnap;\n    return Limit({\n      min: min,\n      max: max\n    });\n  }\n\n  var self = {\n    measure: measure\n  };\n  return self;\n}\n\nfunction ScrollLooper(params) {\n  var contentSize = params.contentSize,\n      location = params.location,\n      limit = params.limit,\n      pxToPercent = params.pxToPercent;\n  var min = limit.min + pxToPercent.measure(0.1);\n  var max = limit.max + pxToPercent.measure(0.1);\n\n  var _a = Limit({\n    min: min,\n    max: max\n  }),\n      reachedMin = _a.reachedMin,\n      reachedMax = _a.reachedMax;\n\n  function shouldLoop(direction) {\n    if (direction === 1) return reachedMax(location.get());\n    if (direction === -1) return reachedMin(location.get());\n    return false;\n  }\n\n  function loop(vectors, direction) {\n    if (!shouldLoop(direction)) return;\n    var loopDistance = contentSize * (direction * -1);\n    vectors.forEach(function (v) {\n      return v.add(loopDistance);\n    });\n  }\n\n  var self = {\n    loop: loop\n  };\n  return self;\n}\n\nfunction ScrollProgress(params) {\n  var _a = params.limit,\n      max = _a.max,\n      scrollLength = _a.length;\n\n  function get(n) {\n    var currentLocation = n - max;\n    return currentLocation / -scrollLength;\n  }\n\n  var self = {\n    get: get\n  };\n  return self;\n}\n\nfunction ScrollSnap(params) {\n  var snapSizes = params.snapSizes,\n      alignment = params.alignment,\n      loop = params.loop;\n  var alignments = snapSizes.map(alignment.measure);\n  var distancesBetween = distancesBetweenScrollSnaps();\n\n  function distancesBetweenScrollSnaps() {\n    var limit = Limit({\n      min: 0,\n      max: snapSizes.length - 1\n    });\n    var counter = Counter({\n      limit: limit,\n      start: 0,\n      loop: loop\n    });\n    return snapSizes.map(function (size, index) {\n      var next = counter.set(index + 1).get();\n      return size + alignments[index] - alignments[next];\n    });\n  }\n\n  function measure(index) {\n    var sizes = distancesBetween.slice(0, index);\n    return sizes.reduce(function (a, s) {\n      return a - s;\n    }, alignments[0]);\n  }\n\n  var self = {\n    measure: measure\n  };\n  return self;\n}\n\nfunction ScrollTarget(params) {\n  var loop = params.loop,\n      limit = params.limit,\n      scrollSnaps = params.scrollSnaps,\n      contentSize = params.contentSize;\n  var reachedMax = limit.reachedMax,\n      reachedAny = limit.reachedAny,\n      removeOffset = limit.removeOffset;\n\n  function minDistance(d1, d2) {\n    return Math.abs(d1) < Math.abs(d2) ? d1 : d2;\n  }\n\n  function findTargetSnap(target) {\n    var distance = removeOffset(target);\n    var ascDiffsToSnaps = scrollSnaps.map(function (scrollSnap) {\n      return scrollSnap - distance;\n    }).map(function (diffToSnap) {\n      return shortcut(diffToSnap, 0);\n    }).map(function (diff, i) {\n      return {\n        diff: diff,\n        index: i\n      };\n    }).sort(function (d1, d2) {\n      return Math.abs(d1.diff) - Math.abs(d2.diff);\n    });\n    var index = ascDiffsToSnaps[0].index;\n    return {\n      index: index,\n      distance: distance\n    };\n  }\n\n  function shortcut(target, direction) {\n    var t1 = target;\n    var t2 = target + contentSize;\n    var t3 = target - contentSize;\n    if (!loop) return t1;\n    if (!direction) return minDistance(minDistance(t1, t2), t3);\n    var shortest = minDistance(t1, direction === 1 ? t2 : t3);\n    return Math.abs(shortest) * direction;\n  }\n\n  function findTargetIndex(target, index) {\n    var reachedBound = !loop && reachedAny(target);\n    if (!reachedBound) return index;\n    var _a = params.index,\n        min = _a.min,\n        max = _a.max;\n    return reachedMax(target) ? min : max;\n  }\n\n  function byIndex(index, direction) {\n    var diffToSnap = scrollSnaps[index] - params.target.get();\n    var distance = shortcut(diffToSnap, direction);\n    return {\n      index: index,\n      distance: distance\n    };\n  }\n\n  function byDistance(distance, snap) {\n    var target = params.target.get() + distance;\n    var targetSnap = findTargetSnap(target);\n    var index = findTargetIndex(target, targetSnap.index);\n    var reachedBound = !loop && reachedAny(target);\n    if (!snap || reachedBound) return {\n      index: index,\n      distance: distance\n    };\n    var diffToSnap = scrollSnaps[index] - targetSnap.distance;\n    var snapDistance = distance + shortcut(diffToSnap, 0);\n    return {\n      index: index,\n      distance: snapDistance\n    };\n  }\n\n  var self = {\n    byDistance: byDistance,\n    byIndex: byIndex,\n    shortcut: shortcut\n  };\n  return self;\n}\n\nfunction ScrollTo(params) {\n  var indexCurrent = params.index,\n      scrollTarget = params.scrollTarget,\n      animation = params.animation;\n  var indexPrevious = params.indexPrevious,\n      events = params.events,\n      targetDistance = params.target;\n\n  function scrollTo(target) {\n    var distanceDiff = target.distance;\n    var indexDiff = target.index !== indexCurrent.get();\n\n    if (distanceDiff) {\n      animation.start();\n      targetDistance.add(distanceDiff);\n    }\n\n    if (indexDiff) {\n      indexPrevious.set(indexCurrent.get());\n      indexCurrent.set(target.index);\n      events.emit('select');\n    }\n  }\n\n  function distance(n, snap) {\n    var target = scrollTarget.byDistance(n, snap);\n    scrollTo(target);\n  }\n\n  function index(n, direction) {\n    var targetIndex = indexCurrent.clone().set(n);\n    var target = scrollTarget.byIndex(targetIndex.get(), direction);\n    scrollTo(target);\n  }\n\n  var self = {\n    distance: distance,\n    index: index\n  };\n  return self;\n}\n\nfunction SlideLooper(params) {\n  var axis = params.axis,\n      scrollLocation = params.location,\n      slidesInView = params.slidesInView,\n      direction = params.direction;\n  var contentSize = params.contentSize,\n      viewSize = params.viewSize,\n      slideSizes = params.slideSizes,\n      scrollSnaps = params.scrollSnaps;\n  var ascItems = arrayKeys(slideSizes);\n  var descItems = arrayKeys(slideSizes).reverse();\n  var loopPoints = startPoints().concat(endPoints());\n  var loopStyle = axis.scroll === 'x' ? 'left' : 'top';\n\n  function removeSlideSizes(indexes, from) {\n    return indexes.reduce(function (a, i) {\n      return a - slideSizes[i];\n    }, from);\n  }\n\n  function slidesInGap(indexes, gap) {\n    return indexes.reduce(function (a, i) {\n      var remainingGap = removeSlideSizes(a, gap);\n      return remainingGap > 0 ? a.concat([i]) : a;\n    }, []);\n  }\n\n  function findLoopPoints(indexes, edge) {\n    var isStartEdge = edge === 'start';\n    var offset = isStartEdge ? -contentSize : contentSize;\n    var slideBounds = slidesInView.findSlideBounds(offset);\n    return indexes.map(function (index) {\n      var initial = isStartEdge ? 0 : -contentSize;\n      var altered = isStartEdge ? contentSize : 0;\n      var bounds = slideBounds.filter(function (b) {\n        return b.index === index;\n      })[0];\n      var point = bounds[isStartEdge ? 'end' : 'start'];\n\n      var getTarget = function getTarget() {\n        return scrollLocation.get() > point ? initial : altered;\n      };\n\n      return {\n        point: point,\n        getTarget: getTarget,\n        index: index,\n        location: -1\n      };\n    });\n  }\n\n  function startPoints() {\n    var gap = scrollSnaps[0] - 1;\n    var indexes = slidesInGap(descItems, gap);\n    return findLoopPoints(indexes, 'end');\n  }\n\n  function endPoints() {\n    var gap = viewSize - scrollSnaps[0] - 1;\n    var indexes = slidesInGap(ascItems, gap);\n    return findLoopPoints(indexes, 'start');\n  }\n\n  function canLoop() {\n    return loopPoints.every(function (_a) {\n      var index = _a.index;\n      var otherIndexes = ascItems.filter(function (i) {\n        return i !== index;\n      });\n      return removeSlideSizes(otherIndexes, viewSize) <= 0;\n    });\n  }\n\n  function loop(slides) {\n    loopPoints.forEach(function (loopPoint) {\n      var getTarget = loopPoint.getTarget,\n          location = loopPoint.location,\n          index = loopPoint.index;\n      var target = getTarget();\n\n      if (target !== location) {\n        slides[index].style[loopStyle] = direction.applyTo(target) + \"%\";\n        loopPoint.location = target;\n      }\n    });\n  }\n\n  function clear(slides) {\n    loopPoints.forEach(function (_a) {\n      var index = _a.index;\n      slides[index].style[loopStyle] = '';\n    });\n  }\n\n  var self = {\n    canLoop: canLoop,\n    clear: clear,\n    loop: loop,\n    loopPoints: loopPoints\n  };\n  return self;\n}\n\nfunction SlideFocus(params) {\n  var scrollTo = params.scrollTo,\n      slidesToScroll = params.slidesToScroll,\n      root = params.root;\n  var eventStore = EventStore();\n  var removeAllEvents = eventStore.removeAll;\n  var lastTabPressTime = 0;\n\n  function registerTabPress(event) {\n    if (event.keyCode !== 9) return;\n    lastTabPressTime = new Date().getTime();\n  }\n\n  function addFocusEvent(slide, index) {\n    var focus = function focus() {\n      var nowTime = new Date().getTime();\n      var diffTime = nowTime - lastTabPressTime;\n      if (diffTime > 10) return;\n      root.scrollLeft = 0;\n      var selectedIndex = Math.floor(index / slidesToScroll);\n      scrollTo.index(selectedIndex, 0);\n    };\n\n    eventStore.add(slide, 'focus', focus, true);\n  }\n\n  function addActivationEvents(slides) {\n    eventStore.add(document, 'keydown', registerTabPress, false);\n    slides.forEach(addFocusEvent);\n  }\n\n  var self = {\n    addActivationEvents: addActivationEvents,\n    removeAllEvents: removeAllEvents\n  };\n  return self;\n}\n\nfunction SlidesInView(params) {\n  var contentSize = params.contentSize,\n      slideSizes = params.slideSizes,\n      viewSize = params.viewSize;\n  var inViewThreshold = params.inViewThreshold,\n      loop = params.loop;\n  var threshold = Math.min(Math.max(inViewThreshold, 0.01), 0.99);\n  var scrollSnaps = arrayKeys(slideSizes).map(scrollSnap);\n  var offsets = loop ? [0, contentSize, -contentSize] : [0];\n  var slideBounds = offsets.reduce(function (a, loopOffset) {\n    return a.concat(findSlideBounds(loopOffset, threshold));\n  }, []);\n\n  function scrollSnap(index) {\n    var span = slideSizes.slice(0, index);\n    return span.reduce(function (a, s) {\n      return a - s;\n    }, 0);\n  }\n\n  function findSlideBounds(offset, threshold) {\n    var thresholds = slideSizes.map(function (s) {\n      return s * (threshold || 0);\n    });\n    return scrollSnaps.map(function (snap, index) {\n      return {\n        start: snap - slideSizes[index] + thresholds[index] + offset,\n        end: snap + viewSize - thresholds[index] + offset,\n        index: index\n      };\n    });\n  }\n\n  function check(location) {\n    return slideBounds.reduce(function (list, slideBound) {\n      var index = slideBound.index,\n          start = slideBound.start,\n          end = slideBound.end;\n      var inList = list.indexOf(index) !== -1;\n      var inView = start < location && end > location;\n      return !inList && inView ? list.concat([index]) : list;\n    }, []);\n  }\n\n  var self = {\n    check: check,\n    findSlideBounds: findSlideBounds\n  };\n  return self;\n}\n\nfunction Translate(params) {\n  var axis = params.axis,\n      container = params.container,\n      direction = params.direction;\n  var containerStyle = container.style;\n  var translate = axis.scroll === 'x' ? x : y;\n  var roundToTwoDecimals = roundToDecimals(2);\n  var disabled = false;\n  var location = 0;\n\n  function x(n) {\n    return \"translate3d(\" + n + \"%,0px,0px)\";\n  }\n\n  function y(n) {\n    return \"translate3d(0px,\" + n + \"%,0px)\";\n  }\n\n  function to(v) {\n    var target = roundToTwoDecimals(v.get());\n    if (disabled || location === target) return;\n    getComputedStyle(container).transform;\n    containerStyle.transform = translate(direction.applyTo(target));\n    location = target;\n  }\n\n  function toggleActive(active) {\n    disabled = !active;\n  }\n\n  function clear() {\n    containerStyle.transform = '';\n    location = 0;\n  }\n\n  var self = {\n    clear: clear,\n    to: to,\n    toggleActive: toggleActive\n  };\n  return self;\n}\n\nfunction Engine(root, container, slides, options, events) {\n  // Options\n  var align = options.align,\n      scrollAxis = options.axis,\n      contentDirection = options.direction,\n      startIndex = options.startIndex,\n      inViewThreshold = options.inViewThreshold,\n      loop = options.loop,\n      speed = options.speed,\n      dragFree = options.dragFree,\n      slidesToScroll = options.slidesToScroll,\n      containScroll = options.containScroll; // Measurements\n\n  var axis = Axis(scrollAxis);\n  var pxToPercent = PxToPercent(axis.measure(container));\n  var viewSize = pxToPercent.totalPercent;\n  var slideSizes = slides.map(axis.measure).map(pxToPercent.measure);\n  var slideIndexes = arrayKeys(slideSizes);\n  var groupedSizes = groupArray(slideSizes, slidesToScroll);\n  var snapSizes = groupedSizes.map(function (g) {\n    return g.reduce(function (a, s) {\n      return a + s;\n    });\n  });\n  var contentSize = slideSizes.reduce(function (a, s) {\n    return a + s;\n  }, 0);\n  var alignment = Alignment({\n    align: align,\n    viewSize: viewSize\n  });\n  var scrollSnap = ScrollSnap({\n    snapSizes: snapSizes,\n    alignment: alignment,\n    loop: loop\n  });\n  var defaultSnaps = arrayKeys(snapSizes).map(scrollSnap.measure);\n  var contain = ScrollContain({\n    alignment: alignment,\n    contentSize: contentSize,\n    viewSize: viewSize\n  });\n  var shouldContain = !loop && containScroll !== '';\n  var trimSnaps = containScroll === 'trimSnaps';\n  var containedSnaps = contain.measure(defaultSnaps, trimSnaps);\n  var scrollSnaps = shouldContain ? containedSnaps : defaultSnaps;\n  var scrollLimit = ScrollLimit({\n    loop: loop,\n    contentSize: contentSize\n  });\n  var limit = scrollLimit.measure(scrollSnaps);\n  var direction = Direction(contentDirection); // Index\n\n  var indexMax = Math.max(0, scrollSnaps.length - 1);\n  var indexSpan = Limit({\n    min: 0,\n    max: indexMax\n  });\n  var index = Counter({\n    limit: indexSpan,\n    start: startIndex,\n    loop: loop\n  });\n  var indexPrevious = index.clone(); // Draw\n\n  var update = function update() {\n    if (!loop) {\n      engine.scrollBounds.constrain(target, engine.dragHandler.pointerDown());\n    }\n\n    engine.scrollBody.seek(target).update();\n    var settled = engine.scrollBody.settle(target);\n\n    if (settled && !engine.dragHandler.pointerDown()) {\n      engine.animation.stop();\n      events.emit('settle');\n    }\n\n    if (!settled) {\n      events.emit('scroll');\n    }\n\n    if (loop) {\n      engine.scrollLooper.loop(loopVectors, engine.scrollBody.direction());\n      engine.slideLooper.loop(slides);\n    }\n\n    engine.translate.to(location);\n    engine.animation.proceed();\n  }; // Shared\n\n\n  var animation = Animation(update);\n  var startLocation = scrollSnaps[index.get()];\n  var location = Vector1D(startLocation);\n  var target = Vector1D(startLocation);\n  var loopVectors = [location, target];\n  var scrollBody = ScrollBody({\n    location: location,\n    speed: speed,\n    mass: 1\n  });\n  var scrollTarget = ScrollTarget({\n    contentSize: contentSize,\n    index: index,\n    limit: limit,\n    loop: loop,\n    scrollSnaps: scrollSnaps,\n    target: target\n  });\n  var scrollTo = ScrollTo({\n    animation: animation,\n    events: events,\n    index: index,\n    indexPrevious: indexPrevious,\n    scrollTarget: scrollTarget,\n    target: target\n  });\n  var slidesInView = SlidesInView({\n    contentSize: contentSize,\n    inViewThreshold: inViewThreshold,\n    loop: loop,\n    slideSizes: slideSizes,\n    viewSize: viewSize\n  }); // DragHandler\n\n  var dragHandler = DragHandler({\n    animation: animation,\n    axis: axis,\n    direction: direction,\n    dragFree: dragFree,\n    dragTracker: DragTracker({\n      axis: axis,\n      pxToPercent: pxToPercent\n    }),\n    root: root,\n    events: events,\n    index: index,\n    limit: limit,\n    location: location,\n    scrollBody: scrollBody,\n    scrollTo: scrollTo,\n    scrollTarget: scrollTarget,\n    target: target\n  }); // Slider\n\n  var engine = {\n    animation: animation,\n    axis: axis,\n    direction: direction,\n    dragHandler: dragHandler,\n    pxToPercent: pxToPercent,\n    index: index,\n    indexPrevious: indexPrevious,\n    limit: limit,\n    location: location,\n    options: options,\n    scrollBody: scrollBody,\n    scrollBounds: ScrollBounds({\n      limit: limit,\n      location: location,\n      scrollBody: scrollBody\n    }),\n    scrollLooper: ScrollLooper({\n      contentSize: contentSize,\n      limit: limit,\n      location: location,\n      pxToPercent: pxToPercent\n    }),\n    scrollProgress: ScrollProgress({\n      limit: limit\n    }),\n    scrollSnaps: scrollSnaps,\n    scrollTarget: scrollTarget,\n    scrollTo: scrollTo,\n    slideFocus: SlideFocus({\n      root: root,\n      scrollTo: scrollTo,\n      slidesToScroll: slidesToScroll\n    }),\n    slideLooper: SlideLooper({\n      axis: axis,\n      contentSize: contentSize,\n      direction: direction,\n      location: location,\n      scrollSnaps: scrollSnaps,\n      slideSizes: slideSizes,\n      slidesInView: slidesInView,\n      viewSize: viewSize\n    }),\n    slidesInView: slidesInView,\n    slideIndexes: slideIndexes,\n    target: target,\n    translate: Translate({\n      axis: axis,\n      container: container,\n      direction: direction\n    })\n  };\n  return engine;\n}\n\nfunction EventEmitter() {\n  var listeners = {};\n\n  function getListeners(evt) {\n    var eventListeners = listeners[evt];\n    return eventListeners || [];\n  }\n\n  function emit(evt) {\n    getListeners(evt).forEach(function (e) {\n      return e(evt);\n    });\n    return self;\n  }\n\n  function on(evt, cb) {\n    listeners[evt] = getListeners(evt).concat([cb]);\n    return self;\n  }\n\n  function off(evt, cb) {\n    listeners[evt] = getListeners(evt).filter(function (e) {\n      return e !== cb;\n    });\n    return self;\n  }\n\n  var self = {\n    emit: emit,\n    off: off,\n    on: on\n  };\n  return self;\n}\n\nvar defaultOptions = {\n  align: 'center',\n  axis: 'x',\n  containScroll: '',\n  containerSelector: '*',\n  direction: 'ltr',\n  dragFree: false,\n  draggable: true,\n  draggableClass: 'is-draggable',\n  draggingClass: 'is-dragging',\n  inViewThreshold: 0,\n  loop: false,\n  selectedClass: 'is-selected',\n  slidesToScroll: 1,\n  speed: 10,\n  startIndex: 0\n};\n\nfunction EmblaCarousel(sliderRoot, userOptions) {\n  var events = EventEmitter();\n  var eventStore = EventStore();\n  var debouncedResize = debounce(resize, 500);\n  var reInit = reActivate;\n  var on = events.on,\n      off = events.off;\n  var engine;\n  var activated = false;\n\n  var options = _extends({}, defaultOptions);\n\n  var rootElementSize = 0;\n  var container;\n  var slides;\n  activate(userOptions);\n\n  function storeElements() {\n    if (!sliderRoot) throw new Error('Missing root node 😢');\n    var selector = options.containerSelector;\n    var sliderContainer = sliderRoot.querySelector(selector);\n    if (!sliderContainer) throw new Error('Missing container node 😢');\n    container = sliderContainer;\n    slides = Array.prototype.slice.call(container.children);\n  }\n\n  function activate(partialOptions) {\n    storeElements();\n    options = _extends(options, partialOptions);\n    engine = Engine(sliderRoot, container, slides, options, events);\n    rootElementSize = engine.axis.measure(sliderRoot);\n    eventStore.add(window, 'resize', debouncedResize);\n    engine.translate.to(engine.location);\n\n    if (options.loop) {\n      if (!engine.slideLooper.canLoop()) {\n        deActivate();\n        return activate({\n          loop: false\n        });\n      }\n\n      engine.slideLooper.loop(slides);\n    }\n\n    if (options.draggable && slides.length) {\n      engine.dragHandler.addActivationEvents();\n\n      if (options.draggableClass) {\n        addClass(sliderRoot, options.draggableClass);\n      }\n\n      if (options.draggingClass) {\n        events.on('pointerDown', toggleDraggingClass).on('pointerUp', toggleDraggingClass);\n      }\n    }\n\n    if (slides.length) {\n      engine.slideFocus.addActivationEvents(slides);\n    }\n\n    if (options.selectedClass) {\n      toggleSelectedClass();\n      events.on('select', toggleSelectedClass).on('pointerUp', toggleSelectedClass);\n    }\n\n    if (!activated) {\n      setTimeout(function () {\n        return events.emit('init');\n      }, 0);\n      activated = true;\n    }\n  }\n\n  function toggleDraggingClass(evt) {\n    var draggingClass = options.draggingClass;\n    if (evt === 'pointerDown') addClass(sliderRoot, draggingClass);else removeClass(sliderRoot, draggingClass);\n  }\n\n  function toggleSelectedClass() {\n    var selectedClass = options.selectedClass;\n    var inView = slidesInView(true);\n    var notInView = slidesNotInView(true);\n    notInView.forEach(function (i) {\n      return removeClass(slides[i], selectedClass);\n    });\n    inView.forEach(function (i) {\n      return addClass(slides[i], selectedClass);\n    });\n  }\n\n  function deActivate() {\n    engine.dragHandler.removeAllEvents();\n    engine.slideFocus.removeAllEvents();\n    engine.animation.stop();\n    eventStore.removeAll();\n    engine.translate.clear();\n    engine.slideLooper.clear(slides);\n    removeClass(sliderRoot, options.draggableClass);\n    slides.forEach(function (s) {\n      return removeClass(s, options.selectedClass);\n    });\n    events.off('select', toggleSelectedClass);\n    events.off('pointerUp', toggleSelectedClass);\n    events.off('pointerDown', toggleDraggingClass);\n    events.off('pointerUp', toggleDraggingClass);\n  }\n\n  function reActivate(partialOptions) {\n    if (!activated) return;\n    var startIndex = selectedScrollSnap();\n\n    var newOptions = _extends({\n      startIndex: startIndex\n    }, partialOptions);\n\n    deActivate();\n    activate(newOptions);\n    events.emit('reInit');\n  }\n\n  function destroy() {\n    if (!activated) return;\n    deActivate();\n    activated = false;\n    events.emit('destroy');\n  }\n\n  function resize() {\n    if (!activated) return;\n    var newRootElementSize = engine.axis.measure(sliderRoot);\n    if (rootElementSize !== newRootElementSize) reActivate();\n    events.emit('resize');\n  }\n\n  function slidesInView(target) {\n    var location = engine[target ? 'target' : 'location'].get();\n    var type = options.loop ? 'removeOffset' : 'constrain';\n    return engine.slidesInView.check(engine.limit[type](location));\n  }\n\n  function slidesNotInView(target) {\n    var inView = slidesInView(target);\n    return engine.slideIndexes.filter(function (i) {\n      return inView.indexOf(i) === -1;\n    });\n  }\n\n  function scrollTo(index, direction) {\n    engine.scrollBody.useBaseMass().useBaseSpeed();\n    if (activated) engine.scrollTo.index(index, direction || 0);\n  }\n\n  function scrollNext() {\n    var next = engine.index.clone().add(1);\n    scrollTo(next.get(), -1);\n  }\n\n  function scrollPrev() {\n    var prev = engine.index.clone().add(-1);\n    scrollTo(prev.get(), 1);\n  }\n\n  function canScrollNext() {\n    var next = engine.index.clone().add(1);\n    return next.get() !== selectedScrollSnap();\n  }\n\n  function canScrollPrev() {\n    var prev = engine.index.clone().add(-1);\n    return prev.get() !== selectedScrollSnap();\n  }\n\n  function scrollSnapList() {\n    return engine.scrollSnaps.map(engine.scrollProgress.get);\n  }\n\n  function scrollProgress() {\n    return engine.scrollProgress.get(engine.location.get());\n  }\n\n  function selectedScrollSnap() {\n    return engine.index.get();\n  }\n\n  function previousScrollSnap() {\n    return engine.indexPrevious.get();\n  }\n\n  function clickAllowed() {\n    return engine.dragHandler.clickAllowed();\n  }\n\n  function dangerouslyGetEngine() {\n    return engine;\n  }\n\n  function containerNode() {\n    return container;\n  }\n\n  function slideNodes() {\n    return slides;\n  }\n\n  var self = {\n    canScrollNext: canScrollNext,\n    canScrollPrev: canScrollPrev,\n    clickAllowed: clickAllowed,\n    containerNode: containerNode,\n    dangerouslyGetEngine: dangerouslyGetEngine,\n    destroy: destroy,\n    off: off,\n    on: on,\n    previousScrollSnap: previousScrollSnap,\n    reInit: reInit,\n    scrollNext: scrollNext,\n    scrollPrev: scrollPrev,\n    scrollProgress: scrollProgress,\n    scrollSnapList: scrollSnapList,\n    scrollTo: scrollTo,\n    selectedScrollSnap: selectedScrollSnap,\n    slideNodes: slideNodes,\n    slidesInView: slidesInView,\n    slidesNotInView: slidesNotInView\n  };\n  return self;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EmblaCarousel);\n//# sourceMappingURL=embla-carousel.esm.js.map\n\n\n//# sourceURL=webpack://clickup_css_project/./node_modules/embla-carousel/embla-carousel.esm.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./client/src/index.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;